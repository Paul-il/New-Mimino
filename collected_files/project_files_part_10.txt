# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\restaurant_project\settings.py
"""
Django settings for restaurant_project project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-l#mt3(j6lln3-z+c=kg-57)exqckh4gurzjob@11qg8*^0cwlr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['https://mimino.app','127.0.0.1','34.134.12.206','192.168.1.12','10.0.0.39']

CSRF_TRUSTED_ORIGINS = [
    'https://mimino.app',
    'http://127.0.0.1',
    'http://34.134.12.206',
    'http://192.168.1.12',
]


"""SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
"""

# Для разработки
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

"""
# Для производства
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

"""

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_ORIGINS = True

CORS_ORIGIN_WHITELIST = [
    'https://mimino.app',
    'http://localhost:31337',
    'http://127.0.0.1:31337',
    'http://192.168.1.12:31337',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_user_agents',
    'restaurant_app.apps.RestaurantAppConfig',
    'delivery_app.apps.DeliveryAppConfig',
    'pickup_app.apps.PickupAppConfig',
    'xhtml2pdf',
    'corsheaders',
    'channels',
    'order_statistics.apps.OrderStatisticsConfig',
    'sales.apps.SalesConfig',
    'expenses.apps.ExpensesConfig',
]


MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
]

ROOT_URLCONF = 'restaurant_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'restaurant_app.context_processors.tips_and_goal',
                'restaurant_app.booking_context.booking_exists',
                'restaurant_app.context_processors.unread_messages_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'restaurant_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

OPERATIONAL_PASSWORD = 'A123456a'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jerusalem'
USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'restaurant_app/static'),]


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

ORDERS_FILES_DIR = os.path.join(MEDIA_ROOT, 'orders_files')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_BEAT_SCHEDULE = {
    'check_reserved_tables': {
        'task': 'tables.tasks.check_reserved_tables',
        'schedule': timedelta(minutes=1),
    },
}

ASGI_APPLICATION = 'restaurant_app.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\restaurant_project\tasks.py
from celery import shared_task
from restaurant_app.views_folder.tip_view import Tip

@shared_task
def reset_tips():
    Tip.objects.update(amount=0)


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\restaurant_project\urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.shortcuts import redirect

from django.conf.urls import handler404

from restaurant_app.views_folder.cabinet import (personal_cabinet, change_password, edit_profile)
from restaurant_app.views_folder.message_view import (inbox, send_message, unread_messages_count, 
                                                      delete_all_messages,delete_selected_messages, 
                                                      send_link_to_paul,chat_detail,chat_with_user)
from restaurant_app.views_folder.tip_view import tip_view, check_tips
from restaurant_app.views_folder.order_summary import order_summary
from restaurant_app.views_folder.find_product import find_products
from restaurant_app.views_folder.confirm_order_view import confirm_order
from restaurant_app.views_folder.close_table_view import close_table_view
from restaurant_app.views_folder.room_view import rooms_view, room_detail_view
from restaurant_app.views_folder.set_bill_printed_view import set_bill_printed
from restaurant_app.views_folder.recommend_view import recommend_view
from restaurant_app.views_folder.manage_products_view import manage_products, toggle_product_availability
from restaurant_app.views_folder.book_table_view import guests_not_arrived_view, edit_booking_view
from restaurant_app.views_folder.user_summary_view import user_summary, user_detail
from restaurant_app.views_folder.menu_view import menu_view, menu_for_waiter_view
from restaurant_app.views_folder.pdf_view import generate_pdf_view
from restaurant_app.views_folder.kitchen_template import kitchen_template_view, print_kitchen, print_kitchen_for_waiter
from restaurant_app.views_folder.order_statistics_view import OrderStatisticsView
from restaurant_app.views_folder.search_product import search_products
from restaurant_app.views_folder.pdf_template_view import pdf_template_view
from restaurant_app.views_folder.ask_where_views import ask_where_view
from restaurant_app.views_folder.search_view import search_products_view
from restaurant_app.views_folder.login_view import login_page_view, logout_view
from restaurant_app.views_folder.tables_view import tables_view, table_order_view
from restaurant_app.views_folder.table_detail_view import table_detail
from restaurant_app.views_folder.add_stock_view import limited_products_view, update_product_stock
from restaurant_app.views_folder.cart_view import (
    add_to_cart_view, order_detail_view, increase_product_in_order_view,
    decrease_product_from_order_view, get_order_item_quantity_view,
    delete_product_from_order_view,
    empty_order_detail_view, waiter_cart_view, add_product_to_waiter_order_view,
    delete_product_from_waiter_order_view, password_check_view, apply_discount_view,
    update_delivery_status
)

from restaurant_app.views import (
    book_table_view, bookings_view, guests_here_view,
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', login_page_view, name='login'),
    path('logout/', logout_view, name='logout'),
    path('ask_where', ask_where_view, name='ask_where'),
    path('table/<int:table_id>/', table_order_view, name='table_order_view'),
    path('tables/', tables_view, name='tables'),
    path('tables/<int:room_id>/', tables_view, name='tables'),
    path('table_detail/<int:table_id>/<int:order_id>/', table_detail, name='table_detail'),
    path('apply_discount/', apply_discount_view, name='apply_discount'),

    path('rooms/', rooms_view, name='rooms'),
    path('room/<int:room_id>/', room_detail_view, name='room_detail'),
    path('room/<int:room_id>/tables/', tables_view, name='tables_in_room'),

    path('order/<int:order_id>/password-check/<str:action>/<int:order_item_id>/', password_check_view, name='password_check'),
    path('confirm-order/<int:order_id>', confirm_order, name='confirm-order'),

    path('search', search_products_view, name='search_products'),
    path('search-products/', search_products, name='search_products'),

    path('', include('expenses.urls', namespace='expenses')),
    path('pickup/', include('pickup_app.urls')),

    path('', include('delivery_app.urls')),

    path('sales/', include('sales.urls')),
   

    path('book_table/', book_table_view, name='book_table'),
    path('bookings/', bookings_view, name='bookings'),
    path('edit_booking/<int:booking_id>/', edit_booking_view, name='edit_booking'),
    path('guests_here/<int:booking_id>/', guests_here_view, name='guests_here'),
    path('guests_not_arrived/<int:booking_id>/', guests_not_arrived_view, name='guests_not_arrived'),
    path('menu/<str:table_id>/<str:category>/', menu_view, name='menu'),

    path('menu_for_waiter/<str:category>/', menu_for_waiter_view, name='menu_for_waiter'),
    path('waiter_cart/', waiter_cart_view, name='waiter_cart'),
    path('add_product_to_waiter_order/<int:product_id>/<int:quantity>/', add_product_to_waiter_order_view, name='add_product_to_waiter_order'),
    path('delete_product_from_waiter_order/<int:waiter_order_id>/<int:order_item_id>/', delete_product_from_waiter_order_view, name='delete_product_from_waiter_order'),
    path('print_kitchen_for_waiter/', print_kitchen_for_waiter, name='print_kitchen_for_waiter'),

    path('table_order/<int:table_id>/', table_order_view, name='table_order'),
    path('cart_detail/<int:order_id>/', order_detail_view, name='cart_detail'),

    path('empty_order_detail/', empty_order_detail_view, name='empty_order_detail'),

    path('/print_kitchen/', print_kitchen, name='print_kitchen'),
    path('set_bill_printed/<int:order_id>/', set_bill_printed, name='set_bill_printed'),

    path('order/<int:order_id>/', order_detail_view, name='cart_detail'),

    path('kitchen_template/<int:order_id>/', kitchen_template_view, name='kitchen_template'),
    path('pdf_template/<int:order_id>/', pdf_template_view, name='pdf_template'),

    path('add_to_cart/<str:table_id>/', add_to_cart_view, name='add_to_cart'),
    path('generate-pdf/<int:order_id>/', generate_pdf_view, name='generate_pdf'),
    path('order/<int:order_id>/add/<int:order_item_id>/', increase_product_in_order_view, name='increase_product_in_order'),
    path('order/<int:order_id>/remove/<int:order_item_id>/', decrease_product_from_order_view, name='decrease_product_from_order'),
    path('order/<int:order_id>/order_item/<int:order_item_id>/quantity/', get_order_item_quantity_view, name='get_order_item_quantity'),
    path('order/<int:order_id>/delete/<int:order_item_id>/', delete_product_from_order_view, name='delete_product_from_order'),

    path('order-item/<int:order_item_id>/update-delivery-status/', update_delivery_status, name='update_delivery_status'),

    path('order_statistics/', OrderStatisticsView.as_view(), name='order_statistics'),
    path('tip/<int:table_id>/', tip_view, name='tip'),
    path('check_tips/', check_tips, name='check_tips'),
    path('close_table/', close_table_view, name='close_table'),

    path('user_summary/', user_summary, name='user_summary'),
    path('user_summary/<int:user_id>/', user_detail, name='user_detail'),

    path('order_summary/', order_summary, name='order_summary'),

    path('manage_products/', manage_products, name='manage_products'),
    path('toggle_product/', toggle_product_availability, name='toggle_product_availability'),
    path('recommendations/<int:order_id>/', recommend_view, name='recommendations'),

    path('find_products/', find_products, name='find_products'),

    path('personal-cabinet/', personal_cabinet, name='personal_cabinet'),
    path('personal-cabinet/change-password/', change_password, name='change_password'),
    path('personal-cabinet/edit-profile/', edit_profile, name='edit_profile'),
    path('inbox/', inbox, name='inbox'),
    path('chat/<int:chat_id>/', chat_detail, name='chat_detail'),
    path('chat_with_user/<int:user_id>/', chat_with_user, name='chat_with_user'),
    path('send_message/', send_message, name='send_message'),
    path('send_message/<int:chat_id>/', send_message, name='send_message'),
    path('delete_selected_messages/<int:chat_id>/', delete_selected_messages, name='delete_selected_messages'),
    path('delete_all_messages/<int:chat_id>/', delete_all_messages, name='delete_all_messages'),
    path('unread_messages_count/', unread_messages_count, name='unread_messages_count'),
    path('send_link_to_paul/', send_link_to_paul, name='send_link_to_paul'),

    path('limited-products/', limited_products_view, name='limited_products'),
    path('update-product-stock/<int:product_id>/', update_product_stock, name='update_product_stock'),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

from django.views.generic import RedirectView
urlpatterns += [
    path('favicon.ico', RedirectView.as_view(url=settings.STATIC_URL + 'favicon.ico')),
]

def custom_404_view(request, exception):
    if request.user.is_authenticated:
        return redirect('ask_where')
    else:
        return redirect('login')

handler404 = custom_404_view


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\restaurant_project\wsgi.py
"""
WSGI config for restaurant_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'restaurant_project.settings')

application = get_wsgi_application()


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\restaurant_project\__init__.py


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\admin.py
from django.contrib import admin

# Register your models here.


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\apps.py
from django.apps import AppConfig


class SalesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'sales'


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\models.py
from django.db import models
from restaurant_app.models.orders import Order, OrderItem   

class Sale(models.Model):
    order = models.OneToOneField(Order, on_delete=models.CASCADE)
    sale_date = models.DateTimeField(auto_now_add=True)

class SaleItem(models.Model):
    order_item = models.OneToOneField(OrderItem, on_delete=models.CASCADE)
    sale_date = models.DateTimeField(auto_now_add=True)

# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\tests.py
from django.test import TestCase

# Create your tests here.


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\urls.py
from django.urls import path
from .views import statistics_view


urlpatterns = [
    path('statistics/', statistics_view, name='sales_statistics'),
]


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\views.py
from django.shortcuts import render
from django.db.models import Sum
from restaurant_app.models.orders import OrderItem 

def statistics_view(request):
    # Получить все проданные товары
    sold_products = (OrderItem.objects
                     .values('product__product_name_rus', 'product__category')
                     .annotate(sold_count=Sum('quantity')))
    # Сгруппировать по категориям
    categories_data = {}
    for item in sold_products:
        category = item['product__category']
        product = item['product__product_name_rus']
        count = item['sold_count']
        if category in categories_data:
            categories_data[category]['total_count'] += count
            categories_data[category]['products'].append({product: count})
        else:
            categories_data[category] = {'total_count': count, 'products': [{product: count}]}

    context = {'categories_data': categories_data}
    return render(request, 'statistics.html', context)


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\__init__.py


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\migrations\0001_initial.py
# Generated by Django 4.0 on 2023-05-24 17:28

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('restaurant_app', '0015_order_table_number'),
    ]

    operations = [
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_date', models.DateTimeField(auto_now_add=True)),
                ('order_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='restaurant_app.orderitem')),
            ],
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_date', models.DateTimeField(auto_now_add=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='restaurant_app.order')),
            ],
        ),
    ]


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\sales\migrations\__init__.py


# End of file

