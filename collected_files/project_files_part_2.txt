# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\migrations\0017_alter_deliveryorder_payment_method.py
# Generated by Django 4.2.1 on 2023-09-27 12:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('delivery_app', '0016_deliveryorder_total_amount_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='deliveryorder',
            name='payment_method',
            field=models.CharField(blank=True, choices=[('cash', 'Наличные'), ('credit_card', 'Кредитная карта')], max_length=12, null=True),
        ),
    ]


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\migrations\0018_alter_courier_name.py
# Generated by Django 4.2.1 on 2023-09-27 15:37

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('delivery_app', '0017_alter_deliveryorder_payment_method'),
    ]

    operations = [
        migrations.AlterField(
            model_name='courier',
            name='name',
            field=models.CharField(choices=[('our_courier', 'Наш Курьер'), ('solo', 'Соло')], max_length=50, unique=True),
        ),
    ]


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\migrations\0019_deliveryorder_delivery_date_and_more.py
# Generated by Django 4.2.1 on 2023-11-14 11:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('delivery_app', '0018_alter_courier_name'),
    ]

    operations = [
        migrations.AddField(
            model_name='deliveryorder',
            name='delivery_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='deliveryorder',
            name='delivery_time',
            field=models.TimeField(blank=True, null=True),
        ),
    ]


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\migrations\0020_alter_courier_name.py
# Generated by Django 4.2.1 on 2023-11-22 09:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('delivery_app', '0019_deliveryorder_delivery_date_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='courier',
            name='name',
            field=models.CharField(max_length=50, unique=True),
        ),
    ]


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\migrations\0021_alter_courier_name.py
# Generated by Django 4.2.1 on 2023-11-22 15:51

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('delivery_app', '0020_alter_courier_name'),
    ]

    operations = [
        migrations.AlterField(
            model_name='courier',
            name='name',
            field=models.CharField(choices=[('solo', 'Solo'), ('our_courier', 'Стас')], max_length=50),
        ),
    ]


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\migrations\__init__.py


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\add_delivery_customer_views.py
"""
Этот модуль содержит представления для управления клиентами и заказами доставки в приложении Django.
Он включает в себя функции для добавления новых клиентов, обновления данных существующих клиентов,
а также создания и обновления заказов на доставку.
"""
# add_delivery_customer_views.py

from django.shortcuts import render, redirect, reverse
from django.utils import timezone
from django.contrib.auth.decorators import login_required

from delivery_app.forms import DeliveryCustomerForm
from delivery_app.models import DeliveryCustomer, DeliveryOrder

@login_required
def add_delivery_customer_view(request, delivery_phone_number, delivery_type):
    # Проверка существования клиента
    customer_qs = DeliveryCustomer.objects.filter(delivery_phone_number=delivery_phone_number)
    customer = customer_qs.first() if customer_qs.exists() else None

    # Инициализация формы данными существующего клиента или пустой формой
    if customer:
        form = DeliveryCustomerForm(request.POST or None, instance=customer)
    else:
        form = DeliveryCustomerForm(request.POST or None)

    if request.method == 'POST' and form.is_valid():
        # Обработка формы и создание/обновление клиента
        saved_customer = form.save(commit=False)
        saved_customer.delivery_phone_number = delivery_phone_number
        saved_customer.save()

        now = timezone.localtime()

        # Проверка на существующие заказы на будущее
        future_orders_exist = DeliveryOrder.objects.filter(
            customer=saved_customer,
            delivery_date__gt=now.date(),
            is_completed=False
        ).exists()

        if future_orders_exist and delivery_type == 'now':
            # Перенаправление на страницу с будущими заказами
            return redirect(reverse('delivery_app:view_for_later_delivery', args=[delivery_phone_number, 'later']))

        # Создание или обновление заказа
        if delivery_type == 'later':
            return redirect(reverse('delivery_app:view_for_later_delivery', args=[delivery_phone_number, delivery_type]))
        else:
            existing_order = DeliveryOrder.objects.filter(
                customer=saved_customer,
                created_at__date=now.date()
            ).first()

            if existing_order and not existing_order.is_completed:
                existing_order.delivery_date = now.date()
                existing_order.delivery_time = now.time()
                existing_order.save()
            else:
                DeliveryOrder.objects.create(
                    customer=saved_customer,
                    delivery_date=now.date(),
                    delivery_time=now.time(),
                    is_completed=False
                )

            return redirect(reverse('delivery_app:delivery_menu', args=[delivery_phone_number, 'salads', delivery_type]))

    return render(request, 'add_delivery_customer.html', {
        'form': form,
        'delivery_phone_number': delivery_phone_number,
        'delivery_type': delivery_type
    })



@login_required
def save_delivery_customer_changes_view(request, delivery_phone_number, delivery_type):
    """
    Обновляет данные клиента доставки и создает или обновляет заказ на доставку.

    Args:
        request: HttpRequest объект.
        delivery_phone_number: Телефонный номер клиента.
        delivery_type: Тип доставки ('now' или 'later').

    Returns:
        HttpResponse объект, перенаправляющий пользователя на соответствующую страницу.
    """
    try:
        customer = DeliveryCustomer.objects.get(delivery_phone_number=delivery_phone_number)
    except DeliveryCustomer.DoesNotExist:
        customer = None

    if request.method == 'POST':
        form = DeliveryCustomerForm(request.POST, instance=customer)
        if form.is_valid():
            updated_customer = form.save(commit=False)
            updated_customer.delivery_phone_number = delivery_phone_number
            updated_customer.save()
            now = timezone.localtime()

            if delivery_type == 'later':
                return redirect(reverse('delivery_app:view_for_later_delivery', args=[delivery_phone_number, delivery_type]))
            else:
                DeliveryOrder.objects.update_or_create(
                    customer=updated_customer,
                    created_at__date=now.date(),
                    defaults={
                        'delivery_date': now.date(),
                        'delivery_time': now.time(),
                        'is_completed': False
                    }
                )
                return redirect(reverse('delivery_app:delivery_menu', args=[delivery_phone_number, 'salads', delivery_type]))
    else:
        form = DeliveryCustomerForm(instance=customer)

    return render(request, 'edit_delivery_customer.html', {
        'form': form,
        'delivery_phone_number': delivery_phone_number,
        'delivery_type': delivery_type
    })

# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\check_delivery_customer_views.py
# check_delivery_customer_views.py

from django.shortcuts import render, get_object_or_404, redirect, reverse
from django.contrib.auth.decorators import login_required
from ..models import DeliveryCustomer
from ..forms import DeliveryCustomerForm

@login_required
def check_delivery_customer_view(request, delivery_phone_number, delivery_type):
    customer = get_object_or_404(DeliveryCustomer, delivery_phone_number=delivery_phone_number)
    form = DeliveryCustomerForm(request.POST or None, instance=customer)

    if request.method == 'POST':
        if form.is_valid():
            updated_customer = form.save(commit=False)
            updated_customer.delivery_phone_number = delivery_phone_number
            updated_customer.save()
            # Используйте delivery_type для дальнейшей логики
            # Например, перенаправление на разные страницы в зависимости от типа доставки
            if delivery_type == 'now':
                return redirect(reverse('delivery_app:delivery_menu', args=[delivery_phone_number, 'salads']))

            elif delivery_type == 'later':
                return redirect(reverse('delivery_app:view_for_later_delivery', args=[delivery_phone_number, delivery_type]))

            else:
                # Обработка недействительного типа доставки
                return render(request, 'error_page.html', {'error_message': 'Неверный тип доставки'})
    return render(request, 'check_delivery_customer.html', {'customer': customer, 'delivery_phone_number': delivery_phone_number, 'form': form, 'delivery_type': delivery_type})


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\clear_solo_dept.py
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from delivery_app.models import Courier


@csrf_exempt
def clear_solo_debt(request):
    if request.method == "POST":
        # здесь вы можете обновить запись в базе данных
        # например, установите поле is_cleared=True для определенной записи
        # courier = Courier.objects.get(name="Соло")
        # courier.is_cleared = True
        # courier.save()
        
        return JsonResponse({'status': 'success'})
    return JsonResponse({'status': 'error'})


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_cart_views.py
from django.shortcuts import render, get_object_or_404, redirect

from django.contrib import messages

from django.http import HttpResponseBadRequest, Http404
from ..models import DeliveryCustomer, DeliveryOrder, DeliveryCart, DeliveryCartItem, Product

from django.utils.decorators import method_decorator

def delivery_empty_cart_view(request, delivery_phone_number, delivery_type):
    return render(request, 'delivery_empty_cart.html', {"delivery_phone_number": delivery_phone_number, "delivery_type": delivery_type})

def delivery_cart_view(request, delivery_phone_number, delivery_type):
    delivery_customer = get_object_or_404(DeliveryCustomer, delivery_phone_number=delivery_phone_number)

    delivery_order = DeliveryOrder.objects.filter(customer=delivery_customer, is_completed=False).select_related('customer').first()

    if not delivery_order:
        return redirect('delivery_app:delivery_menu', delivery_phone_number=delivery_phone_number, delivery_type=delivery_type, category='salads')

    cart = DeliveryCart.objects.filter(delivery_order=delivery_order).prefetch_related('delivery_cart_items').first()
    if cart:
        cart_items = cart.delivery_cart_items.all()
    else:
        
        return redirect('delivery_app:delivery_empty_cart', delivery_phone_number, delivery_type)

    context = {
        'delivery_phone_number': delivery_phone_number,
        'delivery_type': delivery_type,
        'delivery_order': delivery_order,
        'customer_name': delivery_customer.name,
        'cart_items': cart_items,
        'cart': cart,
    }

    return render(request, 'delivery_cart.html', context)

def delivery_add_to_cart_view(request, delivery_phone_number, category, delivery_type):
    if request.method == 'POST':
        product_id = request.POST.get('product_id')
        quantity = int(request.POST.get('quantity'))

        if not product_id or not quantity:
            return redirect('delivery_app:delivery_menu', delivery_phone_number=delivery_phone_number, category=category, delivery_type=delivery_type)

        product = get_object_or_404(Product, id=product_id)
        customer = get_object_or_404(DeliveryCustomer, delivery_phone_number=delivery_phone_number)

        delivery_order = DeliveryOrder.objects.filter(customer=customer, is_completed=False).first()

        cart, created = DeliveryCart.objects.get_or_create(delivery_order=delivery_order, customer=customer)
        if created:
            cart.save()

        # check if the cart item already exists
        try:
            cart_item = DeliveryCartItem.objects.get(cart=cart, product=product)
            if int(quantity) <= 0:
                return HttpResponseBadRequest('Quantity must be a positive integer')

            cart_item.quantity += int(quantity)
            cart_item.save()
        except DeliveryCartItem.DoesNotExist:
            if int(quantity) <= 0:
                return HttpResponseBadRequest('Quantity must be a positive integer')

            cart_item = DeliveryCartItem(cart=cart, product=product, quantity=quantity, delivery_order=delivery_order)
            cart_item.save()

        cart.save()
        messages.success(request, f"{product.product_name_rus} добавлен в корзину.")
        return redirect('delivery_app:delivery_menu', delivery_phone_number=delivery_phone_number, category=category, delivery_type=delivery_type)
    else:
        return redirect('delivery_app:delivery_menu', delivery_phone_number=delivery_phone_number, category=category, delivery_type=delivery_type)

def delivery_increase_product_view(request, delivery_phone_number, product_id, delivery_type):
    delivery_order = DeliveryOrder.objects.filter(customer__delivery_phone_number=delivery_phone_number).order_by('-id').first()
    if not delivery_order:
        raise Http404("No DeliveryOrder matches the given query.")

    cart = DeliveryCart.objects.get(delivery_order=delivery_order)
    product = get_object_or_404(Product, id=product_id)
    cart_item, created = DeliveryCartItem.objects.get_or_create(cart=cart, product=product)
    if not created:
        cart_item.quantity += 1
        cart_item.save()
    messages.success(request, f"{product.product_name_rus} добавлен в корзину.")
    return redirect('delivery_app:delivery_cart', delivery_phone_number=delivery_phone_number, delivery_type=delivery_type)

def delivery_decrease_product_view(request, delivery_phone_number, product_id, delivery_type):
    delivery_order = DeliveryOrder.objects.filter(customer__delivery_phone_number=delivery_phone_number).order_by('-id').first()
    if not delivery_order:
        raise Http404("No DeliveryOrder matches the given query.")
    product = get_object_or_404(Product, id=product_id)
    cart = get_object_or_404(DeliveryCart, delivery_order=delivery_order)
    cart_item = cart.delivery_cart_items.get(product=product)
    if cart_item.quantity > 1:
        cart_item.quantity -= 1
        cart_item.save()
    else:
        cart_item.delete()
        if not cart.delivery_cart_items.exists():
            cart.delete()
            delivery_order.delete()
            return redirect('ask_where')
    messages.success(request, f"{product.product_name_rus} убран из корзины.")
    return redirect('delivery_app:delivery_cart', delivery_phone_number=delivery_phone_number, delivery_type=delivery_type)

def delivery_remove_product_view(request, delivery_phone_number, product_id, delivery_type):
    delivery_customer = get_object_or_404(DeliveryCustomer, delivery_phone_number=delivery_phone_number)
    delivery_order = DeliveryOrder.objects.filter(customer=delivery_customer, is_completed=False).first()
    cart_item = get_object_or_404(DeliveryCartItem, cart=delivery_order.delivery_carts.first(), product_id=product_id)
    cart_item.delete()
    if not cart_item.cart.delivery_cart_items.exists():
        cart_item.cart.delete()
        delivery_order.delete()
        return redirect('ask_where')
    messages.success(request, f"{cart_item.product.product_name_rus} удалено из корзины")
    return redirect('delivery_app:delivery_cart', delivery_phone_number=delivery_phone_number, delivery_type=delivery_type)


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_close_cart.py
from django.template.loader import get_template

from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404, redirect

from ..models import DeliveryOrder, Courier, DeliveryCart


@login_required
def delivery_close_cart_view(request, delivery_phone_number, order_id):
    try:
        # Получаем данные о заказе из базы данных
        delivery_order = get_object_or_404(DeliveryOrder, pk=order_id, customer__delivery_phone_number=delivery_phone_number)
        
        delivery_cart = DeliveryCart.objects.filter(delivery_order=delivery_order).first()
        if delivery_cart:
            total_amount = delivery_cart.get_total()
            delivery_order.total_amount = total_amount
            
        # Извлекаем способ оплаты и курьера из данных запроса
        payment_method = request.POST.get('payment_method')
        print(payment_method)
        selected_courier = request.POST.get('courier')
        
        # Обновляем заказ с указанием способа оплаты и помечаем его как завершенный
        delivery_order.payment_method = payment_method
        delivery_order.is_completed = True
        if selected_courier:
            courier_instance, created = Courier.objects.get_or_create(name=selected_courier)
            delivery_order.courier = courier_instance
        delivery_order.save()
        
        # Удаляем корзину
        DeliveryCart.objects.filter(delivery_order=delivery_order).delete()

        # Перенаправляем на страницу после обработки
        return redirect('ask_where')

    except Exception as e:
        # Если что-то пошло не так, возвращаем текст ошибки
        return HttpResponse(f"Произошла ошибка: {e}", content_type='text/plain', status=500)



# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_kitchen_template_view.py
from django.shortcuts import get_object_or_404
from django.core.exceptions import ObjectDoesNotExist
from delivery_app.models import DeliveryOrder, DeliveryCartItem
from django.http import HttpResponse, JsonResponse
from django.template.loader import render_to_string
from django.utils import timezone
from bs4 import BeautifulSoup
import sys

if sys.platform != "win32":  # Проверяем, что ОС не Windows
    import cups
    
import tempfile
from django.conf import settings
import os
import shutil

def convert_html_to_text(cart_items):
    html = render_to_string('delivery_kitchen_template.html', {'cart_items': cart_items})
    soup = BeautifulSoup(html, 'html.parser')
    text = soup.get_text()
    return text

ORDERS_FILES_DIR = os.path.join(settings.MEDIA_ROOT, 'orders_files')
if not os.path.exists(ORDERS_FILES_DIR):
    os.makedirs(ORDERS_FILES_DIR)

def ensure_orders_files_dir_exists():
    if not os.path.exists(ORDERS_FILES_DIR):
        os.makedirs(ORDERS_FILES_DIR)

def print_with_cups(order_id, title, text_to_print, comments, printer_name):
    ensure_orders_files_dir_exists()
    conn = cups.Connection()
    printers = conn.getPrinters()
    if printer_name not in printers:
        printer_name = list(printers.keys())[0]
    order_file_path = os.path.join(ORDERS_FILES_DIR, f'order_{order_id}.txt')
    with tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8', delete=False) as temp_file:
        temp_file.write(title)
        temp_file.write(text_to_print)
        if comments:
            temp_file.write('\n____________________________\nКомментарии:\n')
            temp_file.write(comments)
        temp_file_path = temp_file.name
    conn.printFile(printer_name, temp_file_path, title, options={})
    with open(order_file_path, 'a', encoding='utf-8') as order_file:
        with open(temp_file_path, 'r', encoding='utf-8') as temp_file:
            shutil.copyfileobj(temp_file, order_file)
    os.unlink(temp_file_path)

CATEGORY_SORT_ORDER = {
    "salads": 1,
}

def sort_items(item):
    return CATEGORY_SORT_ORDER.get(item.product.category, 999)

def get_sorted_delivery_cart_items(order):
    cart_items = DeliveryCartItem.objects.filter(delivery_order=order)
    return sorted(cart_items, key=sort_items)

def group_items_by_printer(sorted_cart_items):
    grouped_items = {}
    for item in sorted_cart_items:
        new_quantity = item.quantity - item.printed_quantity
        if new_quantity <= 0:
            continue
        printer = item.product.printer
        if printer not in grouped_items:
            grouped_items[printer] = []
        grouped_items[printer].append(item)
    return grouped_items

def print_delivery_items_for_printers(grouped_items, order_id, title, new_comments, order, print_items):
    for printer, items in grouped_items.items():
        text_to_print = ""
        for item in items:
            text_to_print += f"{item.product.product_name_rus}\t{item.quantity - item.printed_quantity}\n"
        comments_to_print = new_comments
        print_with_cups(order_id, title, text_to_print, comments_to_print, printer)
        if print_items:
            for item in items:
                item.printed_quantity = item.quantity
                item.save()

def delivery_kitchen_template_view(request, phone_number, order_id):
    order = get_object_or_404(DeliveryOrder, customer__delivery_phone_number=phone_number, id=order_id)
    context = {'order': order}
    html_content = render_to_string('delivery_kitchen_template.html', context)
    return HttpResponse(html_content)

def print_kitchen(request):
    try:
        phone_number = request.GET.get('phone_number')
        order_id = request.GET.get('order_id')
        new_comments = request.GET.get('comments', '')
        order = get_object_or_404(DeliveryOrder, customer__delivery_phone_number=phone_number, id=order_id)
        sorted_cart_items = get_sorted_delivery_cart_items(order)
        current_time = timezone.localtime().strftime('%H:%M')
        title = f"\n\n\nВремя печати: {current_time}\nДоставка\n____________________________\n"
        grouped_items = group_items_by_printer(sorted_cart_items)
        print_items_str = request.GET.get('print_items', 'True')
        print_items = print_items_str.lower() == 'true'
        print_delivery_items_for_printers(grouped_items, order_id, title, new_comments, order, print_items)
        if grouped_items:
            return JsonResponse({'status': 'success', 'message': 'Заказ был успешно подтвержден.'})
        else:
            return JsonResponse({'status': 'warning', 'message': 'Нет новых товаров для печати.'})
    except ObjectDoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Заказ не найден.'})
    except cups.IPPError as e:
        return JsonResponse({'status': 'error', 'message': f"Ошибка при печати: {e}"})
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': f'Произошла неизвестная ошибка: {e}'})



# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_menu_views.py
from django.shortcuts import render, get_object_or_404, redirect

from restaurant_app.models.product import Product
from ..models import DeliveryCustomer, DeliveryOrder, DeliveryCart, DeliveryCartItem, Courier
from ..forms import ProductQuantityForm

CATEGORIES = {
    'salads': 'Салаты',
    'first_dishes': 'Закуски',
    'khachapuri': 'Хачапури',
    'bakery': 'Выпечка',
    'soups': 'Супы',
    'khinkali': 'Хинкали',
    'meat_dishes': 'Мясные блюда',
    'grill_meat': 'Мясо на огне',
    'garnish': 'Гарниры',
    'dessert': 'Десерты',
    'soft_drinks': 'Легкие напитки',
    'beer': 'Пиво',
    'wine' :'Вино',
    'vodka': 'Водка',
    'cognac': 'Коньяк',
    'whisky': 'Виски',
    'dessert_drinks': 'Горячие напитки',
    'mishloha':'Мишлоха',
}


def delivery_menu_view(request, delivery_phone_number, category, delivery_type):
    delivery_customer = get_object_or_404(DeliveryCustomer, delivery_phone_number=delivery_phone_number)
    delivery_order = DeliveryOrder.objects.filter(customer=delivery_customer, is_completed=False).first()
    products = Product.objects.filter(category=category)
    product_quantity_form = ProductQuantityForm()

    context = {
        'delivery_phone_number': delivery_phone_number,
        'category': category,
        'products': products,
        'product_quantity_form': product_quantity_form,
        'CATEGORIES': CATEGORIES,
        'delivery_type': delivery_type,
    }

    if request.method == 'POST':
        product_id = request.POST.get('product_id')
        courier = request.POST.get('courier')
        if courier:
            request.session['selected_courier'] = courier
            return redirect('delivery_app:delivery_menu', delivery_phone_number=delivery_phone_number, category=category, delivery_type=delivery_type)

        quantity = int(request.POST.get('quantity'))
        product = get_object_or_404(Product, id=product_id)

        cart, created = DeliveryCart.objects.get_or_create(delivery_order=delivery_order, customer=delivery_customer)
        cart_item, created = DeliveryCartItem.objects.get_or_create(cart=cart, product=product)

        if not created:
            cart_item.quantity += quantity
        else:
            cart_item.quantity = quantity
        cart_item.save()
        
        return redirect('delivery_app:delivery_cart', delivery_phone_number=delivery_phone_number, delivery_type=delivery_type)

    return render(request, 'delivery_menu.html', context)

def set_courier(request, delivery_phone_number):
    if request.method == 'POST':
        selected_courier_name = request.POST.get('courier')

        # Получаем заказ по номеру телефона
        delivery_customer = DeliveryCustomer.objects.get(delivery_phone_number=delivery_phone_number)
        delivery_order = DeliveryOrder.objects.get(customer=delivery_customer, is_completed=False)

        # Находим курьера по имени
        try:
            selected_courier = Courier.objects.get(name=selected_courier_name)
        except Courier.DoesNotExist:
            # здесь можно добавить сообщение об ошибке для пользователя
            return render(request, 'error_page.html', {'message': 'Курьер не найден!'})


        # Устанавливаем курьера для заказа и сохраняем заказ
        delivery_order.courier = selected_courier
        delivery_order.save()
        
    return redirect('delivery_app:delivery_menu', delivery_phone_number=delivery_phone_number, category='delivery')


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_process.py
from django.shortcuts import render, redirect

# Допустим, вы используете декоратор login_required
from django.contrib.auth.decorators import login_required

@login_required
def delivery_process_view(request, delivery_type):
    # Ваша логика обработки в зависимости от delivery_type
    if delivery_type in ['now', 'later']:
        # Перенаправление на страницу проверки номера телефона с параметром delivery_type
        return redirect('delivery_app:check_delivery_number', delivery_type=delivery_type)
    else:
        # Обработка некорректного типа доставки
        return render(request, 'error_page.html', {'error_message': 'Неверный тип доставки'})



# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_search_view.py
from django.shortcuts import render
from django.db.models import Q
from delivery_app.forms import ProductQuantityForm
from restaurant_app.models.product import Product

def delivery_search_view(request, delivery_phone_number):
    query = request.GET.get('q')
    product_item = Product.objects.filter(Q(product_name_rus__icontains=query))
    category = request.GET.get('category', 'category')
    print(delivery_phone_number)
    product_quantity_form = ProductQuantityForm()
    context = {
        'query': query,
        'products': product_item,
        'product_quantity_form': product_quantity_form,
        'delivery_phone_number': delivery_phone_number,
        'category': category
    }
    return render(request, 'delivery_results.html', context)


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_summary.py
from django.shortcuts import render
from django.db.models import Sum
from django.utils import timezone
from datetime import datetime

from ..models import DeliveryOrder

def get_discount(city_name):
    if city_name == 'חיפה':
        return 25
    elif 'קריית' in city_name:
        return 45
    elif city_name == 'נשר':
        return 35
    elif city_name == 'טירת כרמל':
        return 35
    else:
        return 0

def delivery_summary(request):
    selected_date_str = request.GET.get('date')
    if selected_date_str:
        selected_date = datetime.strptime(selected_date_str, '%Y-%m-%d').date()
    else:
        selected_date = timezone.now().date()

    delivery_orders = DeliveryOrder.objects.filter(delivery_date=selected_date)

    # Агрегация данных по заказам
    solo_cash_orders_total = delivery_orders.filter(courier__name="solo", payment_method='cash').aggregate(total=Sum('total_amount'))['total'] or 0
    our_courier_orders = delivery_orders.filter(courier__name="our_courier")
    our_courier_cash_orders_total = our_courier_orders.filter(payment_method='cash').aggregate(total=Sum('total_amount'))['total'] or 0
    our_courier_orders_total = our_courier_orders.aggregate(total=Sum('total_amount'))['total'] or 0
    all_orders_total = delivery_orders.aggregate(total=Sum('total_amount'))['total'] or 0

    # Расчёт суммы скидок для всех заказов "Нашего Курьера"
    our_courier_discounts_total = sum([get_discount(order.customer.city) for order in our_courier_orders])

    # Вычисление суммы, которую должен вернуть "Наш Курьер" после применения скидок ко всем заказам
    our_courier_cash_orders_after_discount = our_courier_cash_orders_total - our_courier_discounts_total

    # Группировка заказов по городам и вычисление скидок
    city_order_data = {}
    for order in delivery_orders:
        if order.courier and order.courier.name == "solo":
            continue

        city = order.customer.city
        discount_amount = get_discount(city)

        if discount_amount == 45:
            grouped_city = 'קריות'
            city_order_data.setdefault(grouped_city, {'total_orders': 0, 'total_discount_amount': 0})
            city_order_data[grouped_city]['total_orders'] += 1
            city_order_data[grouped_city]['total_discount_amount'] += discount_amount
        else:
            city_order_data.setdefault(city, {'total_orders': 0, 'total_discount_amount': 0})
            city_order_data[city]['total_orders'] += 1
            city_order_data[city]['total_discount_amount'] += discount_amount

    # Преобразование словаря в список для шаблона
    city_order_counts = [(city, data) for city, data in city_order_data.items()]

    # Добавляем информацию в контекст для передачи в шаблон
    context = {
        'delivery_orders': delivery_orders,
        'all_orders_total': all_orders_total,
        'solo_cash_orders_total': solo_cash_orders_total,
        'our_courier_cash_orders_total': our_courier_cash_orders_total,
        'our_courier_orders_total': our_courier_orders_total,
        'our_courier_cash_orders_after_discount': our_courier_cash_orders_after_discount,
        'selected_date': selected_date,
        'city_order_counts': city_order_counts,
    }
    
    return render(request, 'delivery_summary.html', context)


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_template_pdf.py
from django.shortcuts import render, get_object_or_404
from ..models import DeliveryOrder, DeliveryCart
from django.http import HttpResponseRedirect

def delivery_pdf_template_view(request, delivery_phone_number, order_id):
    order = get_object_or_404(DeliveryOrder, customer__delivery_phone_number=delivery_phone_number, id=order_id)
    cart_items = DeliveryCart.objects.filter(delivery_order=order).prefetch_related('delivery_cart_items')
    total_price = sum(
        item.quantity * item.product.product_price
        for cart in order.delivery_carts.all()
        for item in cart.delivery_cart_items.all()
    )

    cart_items = [
        item
        for cart in order.delivery_carts.all()
        for item in cart.delivery_cart_items.all()
    ]

    customer = order.customer
    context = {
        'order': order,
        'cart_items': cart_items,
        'total_price': total_price,
        'customer_name': customer.name,
        'delivery_phone_number': customer.delivery_phone_number,
        'city': customer.city,
        'delivery_street': customer.street,
        'delivery_house_number': customer.house_number,
        'delivery_floor': customer.floor,
        'delivery_apartment_number': customer.apartment_number,
        'delivery_intercom_code': customer.intercom_code,
    }
    return render(request, 'delivery_pdf_template.html', context)


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\delivery_views.py
from django.shortcuts import render, redirect, reverse
from django.contrib.auth.decorators import login_required
from ..forms import DeliveryForm
from ..models import DeliveryCustomer

@login_required
def delivery_view(request, delivery_type):
    if request.method == 'POST':
        form = DeliveryForm(request.POST)
        if form.is_valid():
            delivery_phone_number = form.cleaned_data['delivery_phone_number']
            if DeliveryCustomer.objects.filter(delivery_phone_number=delivery_phone_number).exists():
                # Перенаправляем пользователя на страницу проверки клиента с типом доставки
                return redirect(reverse('delivery_app:check_delivery_customer', args=[delivery_phone_number, delivery_type]))
            else:
                # Перенаправляем пользователя на страницу добавления клиента с типом доставки
                return redirect(reverse('delivery_app:add_delivery_customer', args=[delivery_phone_number, delivery_type]))
    else:
        form = DeliveryForm()
    return render(request, 'check_delivery_number.html', {'form': form, 'delivery_type': delivery_type})


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\for_later_delivery_view.py
# for_later_delivery_view.py
from django.shortcuts import render, redirect, reverse
from django.contrib.auth.decorators import login_required
from ..models import DeliveryCustomer, DeliveryOrder
from ..forms import DeliveryDateTimeForm, SelectOrderForm
from datetime import datetime

@login_required
def view_for_later_delivery(request, delivery_phone_number, delivery_type):
    print(delivery_type)
    customer = DeliveryCustomer.objects.get(delivery_phone_number=delivery_phone_number)
    active_orders = DeliveryOrder.objects.filter(customer=customer, is_completed=False)

    select_order_form = SelectOrderForm(request.POST or None, orders=active_orders)
    date_time_form = DeliveryDateTimeForm(request.POST or None)

    if request.method == 'POST':
        if 'select_order' in request.POST and select_order_form.is_valid():
            # Обработка SelectOrderForm
            print("Обработка SelectOrderForm")
            selected_order = select_order_form.cleaned_data['order']
            # Перенаправление на страницу подтверждения заказа или другую страницу
            return redirect(reverse('delivery_app:delivery_menu', args=[delivery_phone_number, 'salads', delivery_type]))

        elif 'delivery_date_time' in request.POST and date_time_form.is_valid():
            # Обработка DeliveryDateTimeForm
            print("Обработка DeliveryDateTimeForm")
            delivery_date = date_time_form.cleaned_data['date']
            delivery_time = date_time_form.cleaned_data['time']
            print(delivery_date, delivery_time)
            # Создание нового заказа
            new_order = DeliveryOrder.objects.create(
                customer=customer,
                delivery_date=delivery_date,
                delivery_time=delivery_time,
                is_completed=False
            )
            # Перенаправление на страницу подтверждения заказа или другую страницу
            return redirect(reverse('delivery_app:delivery_menu', args=[delivery_phone_number, 'salads', delivery_type]))
            
    context = {
        'customer': customer,
        'select_order_form': select_order_form if active_orders.exists() else None,
        'date_time_form': date_time_form if not active_orders.exists() else None,
        'delivery_type': delivery_type
    }

    return render(request, 'later_delivery.html', context)


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\future_orders_view.py
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from delivery_app.models import DeliveryCustomer, DeliveryOrder
from django.utils import timezone

@login_required
def future_orders_view(request):
    """
    Отображает будущие заказы.

    Args:
        request: HttpRequest объект.

    Returns:
        HttpResponse объект с отображением будущих заказов.
    """
    future_orders = DeliveryOrder.objects.filter(
        delivery_date__gt=timezone.now().date(),
        is_completed=False
    )

    return render(request, 'future_orders_template.html', {
        'future_orders': future_orders
    })



# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\delivery_app\view\telegram_webhook_view.py
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json

@csrf_exempt  # Отключение проверки CSRF для этого представления
@require_http_methods(["POST"])  # Принимать только POST-запросы
def telegram_webhook(request):
    data = json.loads(request.body.decode('utf-8'))
    # Обработка данных от Telegram
    # ...
    return JsonResponse({"status": "ok"})


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\expenses\admin.py


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\expenses\apps.py
from django.apps import AppConfig


class ExpensesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'expenses'


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\expenses\models.py


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\expenses\tests.py
from django.test import TestCase

# Create your tests here.


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\expenses\urls.py
from django.urls import path
from expenses.view.transactions import transaction_list

app_name = 'expenses'

urlpatterns = [
    path('transaction_list', transaction_list, name='transaction_list'),
]

# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\expenses\views.py
from django.shortcuts import render

# Create your views here.


# End of file

# File: c:\Users\p4ul7\OneDrive\מסמכים\Mimino\expenses\__init__.py


# End of file

